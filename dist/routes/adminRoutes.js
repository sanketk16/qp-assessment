"use strict";
// // src/routes/adminRoutes.ts
// import { Router, Request, Response } from 'express';
// import { v4 as uuidv4 } from 'uuid';
// import { groceryItems } from '../data/groceryData';
// import { GroceryItem } from '../models/GroceryItem';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// const adminRouter = Router();
// /**
//  * Add new grocery items
//  */
// adminRouter.post('/grocery', (req: Request, res: Response) => {
//   const { name, price, inventory } = req.body;
//   if (!name || price === undefined || inventory === undefined) {
//     return res.status(400).json({ message: 'Invalid body parameters.' });
//   }
//   const newGrocery: GroceryItem = {
//     id: uuidv4(),
//     name,
//     price,
//     inventory
//   };
//   groceryItems.push(newGrocery);
//   return res.status(201).json({ message: 'Grocery item added', data: newGrocery });
// });
// /**
//  * View existing grocery items
//  */
// adminRouter.get('/grocery', (req: Request, res: Response) => {
//   return res.json({ message: 'All grocery items', data: groceryItems });
// });
// /**
//  * Remove grocery items from the system
//  */
// adminRouter.delete('/grocery/:id', (req: Request, res: Response) => {
//   const { id } = req.params;
//   const index = groceryItems.findIndex(item => item.id === id);
//   if (index === -1) {
//     return res.status(404).json({ message: 'Grocery item not found' });
//   }
//   const removedItem = groceryItems[index];
//   groceryItems.splice(index, 1);
//   return res.json({ message: 'Grocery item removed', data: removedItem });
// });
// /**
//  * Update details (e.g., name, price) of existing grocery items
//  */
// adminRouter.patch('/grocery/:id', (req: Request, res: Response) => {
//   const { id } = req.params;
//   const { name, price } = req.body;
//   const item = groceryItems.find(g => g.id === id);
//   if (!item) {
//     return res.status(404).json({ message: 'Grocery item not found' });
//   }
//   if (name) item.name = name;
//   if (price !== undefined) item.price = price;
//   return res.json({ message: 'Grocery item updated', data: item });
// });
// /**
//  * Manage inventory levels of grocery items
//  */
// adminRouter.patch('/grocery/:id/inventory', (req: Request, res: Response) => {
//   const { id } = req.params;
//   const { inventory } = req.body;
//   const item = groceryItems.find(g => g.id === id);
//   if (!item) {
//     return res.status(404).json({ message: 'Grocery item not found' });
//   }
//   if (inventory === undefined || inventory < 0) {
//     return res.status(400).json({ message: 'Inventory must be a non-negative number' });
//   }
//   item.inventory = inventory;
//   return res.json({ message: 'Inventory updated', data: item });
// });
// export default adminRouter;
// src/routes/adminRoutes.ts
const express_1 = require("express");
const data_source_1 = require("../data-source");
const GroceryItem_1 = require("../entities/GroceryItem");
const adminRouter = (0, express_1.Router)();
// Repository for GroceryItem
const groceryRepo = data_source_1.AppDataSource.getRepository(GroceryItem_1.GroceryItem);
/**
 * Add new grocery item
 */
adminRouter.post('/grocery', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { name, price, inventory } = req.body;
        if (!name || price === undefined || inventory === undefined) {
            return res.status(400).json({ message: 'Invalid body parameters.' });
        }
        const newGrocery = groceryRepo.create({
            // id will be auto-generated by @PrimaryGeneratedColumn
            name,
            price,
            inventory,
        });
        yield groceryRepo.save(newGrocery);
        return res.status(201).json({ message: 'Grocery item added', data: newGrocery });
    }
    catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error' });
    }
}));
/**
 * View all grocery items
 */
adminRouter.get('/grocery', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const items = yield groceryRepo.find();
        return res.json({ message: 'All grocery items', data: items });
    }
    catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error' });
    }
}));
/**
 * Remove grocery item
 */
adminRouter.delete('/grocery/:id', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { id } = req.params;
        const item = yield groceryRepo.findOne({ where: { id } });
        if (!item) {
            return res.status(404).json({ message: 'Grocery item not found' });
        }
        yield groceryRepo.remove(item);
        return res.json({ message: 'Grocery item removed', data: item });
    }
    catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error' });
    }
}));
/**
 * Update grocery details (name, price)
 */
adminRouter.patch('/grocery/:id', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { id } = req.params;
        const { name, price } = req.body;
        const item = yield groceryRepo.findOne({ where: { id } });
        if (!item) {
            return res.status(404).json({ message: 'Grocery item not found' });
        }
        if (name)
            item.name = name;
        if (price !== undefined)
            item.price = price;
        yield groceryRepo.save(item);
        return res.json({ message: 'Grocery item updated', data: item });
    }
    catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error' });
    }
}));
/**
 * Manage inventory
 */
adminRouter.patch('/grocery/:id/inventory', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { id } = req.params;
        const { inventory } = req.body;
        if (inventory === undefined || inventory < 0) {
            return res.status(400).json({ message: 'Inventory must be a non-negative number' });
        }
        const item = yield groceryRepo.findOne({ where: { id } });
        if (!item) {
            return res.status(404).json({ message: 'Grocery item not found' });
        }
        item.inventory = inventory;
        yield groceryRepo.save(item);
        return res.json({ message: 'Inventory updated', data: item });
    }
    catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error' });
    }
}));
exports.default = adminRouter;
